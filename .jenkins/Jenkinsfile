pipeline {
	options {
		buildDiscarder(logRotator(numToKeepStr: '10'))
		disableConcurrentBuilds()
		ansiColor('xterm')
	}
	agent {
		label 'docker'
	}
	environment {
		IMAGE = 'jc21/rpmbuild-rocky8'
	}
	stages {
		stage('Base') {
			when {
				branch 'master'
			}
			steps {
				withCredentials([usernamePassword(credentialsId: 'jc21-dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
					sh 'docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"'
					sh 'docker build --pull --push --no-cache -t "${IMAGE}:latest" -f docker/Dockerfile .'
				}
			}
		}
		stage('Others') {
			parallel {
				stage('Golang') {
					when {
						branch 'master'
					}
					steps {
						withCredentials([usernamePassword(credentialsId: 'jc21-dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
							sh 'docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"'
							sh 'docker build --pull --push --no-cache -t "${IMAGE}:golang" -f docker/Dockerfile.golang .'
						}
					}
				}
				stage('Rust') {
					when {
						branch 'master'
					}
					steps {
						withCredentials([usernamePassword(credentialsId: 'jc21-dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
							sh 'docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"'
							sh 'docker build --pull --push --no-cache -t "${IMAGE}:rust" -f docker/Dockerfile.rust .'
						}
					}
				}
				stage('Haskell') {
					when {
						branch 'master'
					}
					steps {
						withCredentials([usernamePassword(credentialsId: 'jc21-dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
							sh 'docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"'
							sh 'docker build --pull --push --no-cache -t "${IMAGE}:haskell" -f docker/Dockerfile.haskell .'
						}
					}
				}
			}
		}
	}
	triggers {
		githubPush()
	}
	post {
		success {
			juxtapose event: 'success'
			sh 'figlet "SUCCESS"'
		}
		failure {
			juxtapose event: 'failure'
			sh 'figlet "FAILURE"'
		}
	}
}
